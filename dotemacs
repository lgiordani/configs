;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(setq custom-file "~/.emacs-custom")
(load custom-file)

;; Load package system and add MELPA repository.
(require 'package)
(setq package-archives '(("melpa" . "http://melpa.org/packages/")
                         ("gnu" . "http://elpa.gnu.org/packages/")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Emacs configuration

;; Open .emacs with C-x c
(defun edit-dotemacs ()
  (interactive)
  (switch-to-buffer (find-file-noselect "~/.emacs")))

(global-set-key (kbd "C-x c") 'edit-dotemacs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Server mode

;; When server mode is activated the word SERVER
;; appears in the mode line.
(defun custom-server-mode ()
  (interactive)
  (if (default-value 'server-mode)
      (progn
        (setq mode-line-misc-info (delete "SERVER " mode-line-misc-info))
        (server-mode -1))
    (progn
      (add-to-list 'mode-line-misc-info "SERVER ")
      (server-mode 1))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLOBAL SETTINGS

;; ESC is a very nice key to quit things
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))

;; No tool bar, I don't need it thanks
;; This is the tool bar with some shortcuts like file and edit operations
(tool-bar-mode -1)

;; Same for the menu bar, thanks
;; This is the menu bar with File, Edit, Options, and friends
(menu-bar-mode -1)

;; Visual line mode everywhere, please. Basically word wrap mode.
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html
(global-visual-line-mode t)

;; Display line numbers
(global-display-line-numbers-mode t)

;; Set C-c, C-x, C-v just to be in sync with the rest of the world
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html
(cua-mode t)

;; Highlight the matching parenthesis
(show-paren-mode t)

;; When asking for help make the help window active
(setq help-window-select t)

;; Always use spaces to indent please
(setq-default indent-tabs-mode nil)

;; Set transparency of emacs
;; https://www.emacswiki.org/emacs/TransparentEmacs
;; (defun transparency (value)
;;   "Sets the transparency of the frame window. 0=transparent/100=opaque"
;;   (interactive "nTransparency Value 0 - 100 opaque:")
;;   (set-frame-parameter (selected-frame) 'alpha value))
;; (set-frame-parameter (selected-frame) 'alpha '99)

;; Set the title of the window to the name of the file
(setq-default frame-title-format '("%b"))

;; Unicode fonts
(require 'unicode-fonts)
(unicode-fonts-setup)

;; Yasnippets
;; https://github.com/joaotavora/yasnippet
(yas-global-mode t)

;; Automatically revert buffers if they change on disk
(global-auto-revert-mode t)

;; Put backup and autosave files somewhere else
;; These often get in the way of other tools.
(defvar backup-dir (expand-file-name "~/.emacs.d/backup/"))
(defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
(setq backup-directory-alist (list (cons ".*" backup-dir)))
(setq auto-save-list-file-prefix autosave-dir)
(setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))

;; Enable upcase-region and downcase-region
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; https://stackoverflow.com/questions/17958397/emacs-delete-whitespaces-or-a-word
(defun kill-whitespace-or-word ()
  (interactive)
  (if (looking-at "[ \t\n]")
      (let ((p (point)))
        (re-search-forward "[^ \t\n]" nil :no-error)
        (backward-char)
        (kill-region p (point)))
    (kill-word 1)))
(global-set-key (kbd "C-<delete>") 'kill-whitespace-or-word)

;; (defun scroll-up-and-recenter ()
;;      (interactive)
;;      (scroll-up)
;;      (move-to-window-line-top-bottom -1)
;;      (recenter))
   
;; (defun scroll-down-and-recenter ()
;;      (interactive)
;;      (scroll-down)
;;      (move-to-window-line-top-bottom 0)
;;      (recenter))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Flycheck

;; https://github.com/flycheck/flycheck
(use-package flycheck
  :ensure t
  :config
  :bind (("M-<next>" . flycheck-next-error)
         ("M-<prior>" . flycheck-previous-error))
  :hook (after-init . global-flycheck-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ivy completion

;; https://github.com/abo-abo/swiper
(ivy-mode t)
(setq ivy-use-selectable-prompt t)
(define-key ivy-minibuffer-map (kbd "S-<up>") #'ivy-previous-history-element)
(define-key ivy-minibuffer-map (kbd "S-<down>") #'ivy-next-history-element)
;; (define-key ivy-minibuffer-map (kbd "TAB") 'ivy-partial)
(define-key ivy-minibuffer-map (kbd "RET") 'ivy-alt-done)
(define-key ivy-minibuffer-map (kbd "C-RET") 'ivy-done)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; WHICH KEY

(use-package which-key
  :ensure t
  :config
  (which-key-mode)
  :bind
  ("<menu>" . which-key-show-top-level))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TABS AND BUFFERS

;; Map move to previous and next buffer to C-S-Pg*
(global-set-key (kbd "C-S-<prior>") 'previous-buffer)
(global-set-key (kbd "C-S-<next>") 'next-buffer)

;; https://github.com/ema2159/centaur-tabs
(require 'centaur-tabs)
(centaur-tabs-mode t)
(centaur-tabs-headline-match)
(centaur-tabs-group-by-projectile-project)
(setq centaur-tabs-style "bar"
      centaur-tabs-height 32
      centaur-tabs-set-icons t
      centaur-tabs-set-modified-marker t
      centaur-tabs-set-close-button nil
      centaur-tabs-set-bar 'under)

;; Map move between tabs to C-Pg*
(global-set-key (kbd "C-<prior>") 'centaur-tabs-backward)
(global-set-key (kbd "C-<next>") 'centaur-tabs-forward)

;; Map move between tab groups to C-M-Pg*
(global-set-key (kbd "C-M-<prior>") 'centaur-tabs-backward-group)
(global-set-key (kbd "C-M-<next>") 'centaur-tabs-forward-group)

;; Map move tabs to C-s-
(global-set-key (kbd "C-s-<left>") 'centaur-tabs-move-current-tab-to-left)
(global-set-key (kbd "C-s-<right>") 'centaur-tabs-move-current-tab-to-right)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TREE VIEW

;; https://github.com/Alexander-Miller/treemacs

(use-package treemacs
  :ensure t
  :defer t
  :config
  (progn
    (unbind-key "<next>" treemacs-mode-map)
    (unbind-key "<prior>" treemacs-mode-map)
    (setq treemacs-read-string-input 'from-minibuffer)
    (treemacs-follow-mode t)

    ;; This has issues when moving through projects
    ;; To replicate:
    ;; * Open a file in a project
    ;; * Open another file in another project
    ;; * Move to the tab of the previous file
    ;; * Emacs freezes
    ;; (treemacs-project-follow-mode t)
    )
  :hook
  (
   (treemacs-mode . (lambda () (setq-local truncate-lines t
					   auto-hscroll-mode 'current-line)))
   (treemacs-mode . (lambda () (text-scale-decrease 1)))

   ;; This sets focus on the tree view, I don't like it
   ;; (emacs-startup . treemacs)
   ))

(use-package treemacs-all-the-icons)
(treemacs-load-all-the-icons-with-workaround-font "DejaVu Sans Mono")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LINES AND REGIONS

;; Define C-/ to comment and uncomment regions and lines
(defun comment-or-uncomment-line-or-region ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)
        (next-line)))
(global-set-key (kbd "C-/") 'comment-or-uncomment-line-or-region)

;; Drag-stuff - Drag lines and regions
(drag-stuff-global-mode 1)
;; Use C-S-up/down
(setq drag-stuff-modifier '(control shift))
(define-key drag-stuff-mode-map (drag-stuff--kbd 'up) 'drag-stuff-up)
(define-key drag-stuff-mode-map (drag-stuff--kbd 'down) 'drag-stuff-down)

;; Indent rigidly
;; https://stackoverflow.com/questions/11623189/how-to-bind-keys-to-indent-unindent-region-in-emacs
(defun my-indent-region (N)
  (interactive "p")
  (if (use-region-p)
      (progn (indent-rigidly (region-beginning) (region-end) (* N 4))
             (setq deactivate-mark nil))
    (self-insert-command N)))
(defun my-unindent-region (N)
  (interactive "p")
  (if (use-region-p)
      (progn (indent-rigidly (region-beginning) (region-end) (* N -4))
             (setq deactivate-mark nil))
    (self-insert-command N)))
(global-set-key (kbd "C-M-<right>") 'my-indent-region)
(global-set-key (kbd "C-M-<left>") 'my-unindent-region)

;; Duplicate line with C-S-d
(defun duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times.
If there's no region, the current line will be duplicated. However, if
there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (let (beg end (origin (point)))
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (let ((region (buffer-substring-no-properties beg end)))
      (dotimes (i arg)
        (goto-char end)
        (newline)
        (insert region)
        (setq end (point)))
      (goto-char (+ origin (* (length region) arg) arg)))))
(global-set-key (kbd "C-S-d") 'duplicate-current-line-or-region)

;; Multiple cursors
(global-set-key (kbd "C-d") 'mc/mark-next-like-this-word)
(global-set-key (kbd "C-c C-d") 'mc/mark-all-words-like-this)
(global-set-key (kbd "C-M-<up>") 'mc/mark-previous-lines)
(global-set-key (kbd "C-M-<down>") 'mc/mark-next-lines)
(global-set-key (kbd "C-M-d") 'mc/edit-lines)

;; C-a marks the whole buffer
(global-set-key (kbd "C-a") 'mark-whole-buffer)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; WINDOWS AND BUFFERS

;; Windmove - move between windows use ALT
(windmove-default-keybindings 'meta)
;; Unset Shift-arrow keybindings
(global-unset-key (vector (list 'shift 'left)))
(global-unset-key (vector (list 'shift 'right)))
(global-unset-key (vector (list 'shift 'up)))
(global-unset-key (vector (list 'shift 'down)))

;; Skip system buffers when cycling
(set-frame-parameter (selected-frame) 'buffer-predicate
		     (lambda (buf) (not (string-match-p "^*" (buffer-name buf)))))

;; Golden ratio mode
(require 'golden-ratio)
(golden-ratio-mode 1)

;; Show file full path
;; https://stackoverflow.com/questions/3669511/the-function-to-show-current-files-full-path-in-mini-buffer
;; Added kill-new to get the file path in the clipboard
(defun show-file-full-path ()
  (interactive)
  (message (buffer-file-name))
  (kill-new (buffer-file-name)))

(global-set-key (kbd "C-x f") 'show-file-full-path)

;; kill the current buffer instead of choosing
;; http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/
;; except that kill-this-buffer may break if menus are not available:
;; https://www.reddit.com/r/emacs/comments/64xb3q/killthisbuffer_sometimes_just_stops_working/
(global-set-key (kbd "C-w") (lambda () (interactive) (kill-buffer (current-buffer))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SPELL CHECKING

;; Spell check turned on by default
(add-hook 'text-mode-hook 'flyspell-mode)

;; Spell check with hunspell
(when (executable-find "hunspell")
  (setq-default ispell-program-name "hunspell")
  (setq ispell-really-hunspell t))

;; ;; Activate spell-fu to check the whole text
;; (global-spell-fu-mode)

;; Allow to switch between English and Italian dictionary
(setq english-dictionary "en_GB")
(setq italian-dictionary "it")
(setq current-dictionary english-dictionary)
(setq flyspell-mode-line-string (concat " FlyS:" current-dictionary))
      
(defun toggle-dictionary ()
  (interactive)
  (if (eq current-dictionary english-dictionary)
      (setq current-dictionary italian-dictionary)
    (setq current-dictionary english-dictionary))
  (ispell-change-dictionary current-dictionary)
  (setq flyspell-mode-line-string (concat " FlyS:" current-dictionary))
  (flyspell-buffer))
(global-set-key (kbd "s-\\") 'toggle-dictionary)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ICONS

;; https://github.com/domtronn/all-the-icons.el
;; Remember M-x all-the-icons-install-fonts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; THEMES

;; https://github.com/hlissner/emacs-doom-themes
(require 'doom-themes)
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
(setq doom-themes-treemacs-theme "doom-colors")

(setq light-theme 'doom-nord-light)
(setq dark-theme 'my-doom-nova)

(setq current-theme light-theme)

(set-frame-font "DejaVu Sans Mono 16" nil t)

;; https://emacs.stackexchange.com/questions/60690/change-font-size-globally-with-a-shortcut
(defun change-font-size (new-size)
  "Change the font size to the given value"
  (interactive "nNew font size: ")
  (set-face-attribute 'default nil :height (* 10 new-size)))

(defun my/check-monitor ()
 (change-font-size 
   (if (<= (nth 3 (assq 'geometry (frame-monitor-attributes))) 1920) 10 13)))

(defun toggle-theme ()
  (interactive)
  (if (eq current-theme light-theme)
      (setq current-theme dark-theme)
    (setq current-theme light-theme))
  (load-theme current-theme)
  (my/check-monitor))

(toggle-theme)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AUTOCOMPLETE AND SNIPPETS

(use-package company
  :ensure
  ;; :bind
  ;; (:map lsp-mode-map
  ;;       ("<down>" . nil)
  ;;       ("S-<down>" . company-select-next)
  ;;       ("S-<up>" . company-select-previous))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MARKDOWN

;; (require 'flymake-markdownlint)
;; (add-hook 'markdown-mode-hook 'flymake-markdownlint-setup)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PYTHON DEVELOPMENT

(pyenv-mode)
(pyenv-mode-set "emacs")

(setq-default flycheck-disabled-checkers '(python-flake8))
;; (setq-default flycheck-disabled-checkers '(python-pylint))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LSP

;; https://github.com/mattduck/dotfiles/blob/master/emacs.d.symlink/init.org#lsp-base-packages

(use-package lsp-mode
  :ensure
  :commands lsp
  :custom
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  ;; enable / disable the hints as you prefer:
  (lsp-rust-analyzer-server-display-inlay-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil)
  
  :config
  (setq lsp-diagnostic-package :none)
  (setq lsp-ui-doc-enable nil)
  (setq lsp-prefer-capf t)
  ;; (setq lsp-print-io t)
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)

  ;; Python
  (setq lsp-pylsp-plugins-black-enabled t)
  (setq lsp-pylsp-plugins-flake8-enabled t)
  (setq lsp-pylsp-plugins-pylint-enabled nil)
  (setq lsp-pylsp-plugins-mypy-enabled t)
  
  :hook
  ((python-mode . lsp))
  :bind
  ("<f12> n" . lsp-rename))

(use-package lsp-ui
  :ensure
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))

(use-package python-black
  :demand t
  :after python
  :hook (python-mode . python-black-on-save-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RUST DEVELOPMENT

;; https://github.com/brotzeit/rustic
(use-package rustic
  :config
  (setq compilation-ask-about-save nil)
  (setq rustic-compile-command "cargo build")
  (setq rustic-analyzer-command '("~/.cargo/bin/rust-analyzer"))
  (setq rustic-format-display-method t)
  (setq rustic-format-on-save t)
  (setq rustic-format-on-save-method 'rustic-cargo-fmt)
  :bind
  ("<f12> b" . rustic-cargo-build)
  ("<f12> t" . rustic-cargo-test)
  ("<f12> r" . rustic-cargo-run))

;; For now it's here, it should be general
(global-set-key (kbd "<f12> <right>") 'next-error)
(global-set-key (kbd "<f12> <left>") 'prev-error)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; JS DEVELOPMENT

;; JSX
;;https://github.com/felipeochoa/rjsx-mode
(add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
;; Don't override my beloved multiple cursors
(with-eval-after-load 'rjsx-mode
  (define-key rjsx-mode-map (kbd "C-d") nil))

;; JS is indented with 2 spaces
(custom-set-variables '(js-indent-level 2))

;; Use binaries in node_modules
;; https://github.com/codesuki/add-node-modules-path
(add-hook 'js2-mode-hook 'add-node-modules-path)

;; Pretty JS code
;; https://github.com/prettier/prettier-emacs
(require 'prettier-js)
(add-hook 'js2-mode-hook 'prettier-js-mode)

;; Use eslint with rjsx-mode for jsx files
;; (flycheck-add-mode 'javascript-eslint 'rjsx-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OTHER LANGUAGES

;; Terraform
;; https://github.com/emacsorphanage/terraform-mode
(use-package terraform-mode
  :ensure t
  :config
  (setq exec-path
        (append exec-path '("~/.tfenv/bin/")))
  :hook (terraform-mode . terraform-format-on-save-mode))

;; Mau
(let ((mau-mode-file "~/devel/mau.el"))
 (when (file-exists-p mau-mode-file)
   (load-file mau-mode-file))
 )
(add-to-list 'auto-mode-alist '("\\.mau\\'" . mau-mode))

;; Insert two backticks and move cursor between them
(defun insert-backticks ()
  (interactive)
  (insert "``")
  (left-char)
  )

;; Insert macro
(defun insert-macro ()
  (interactive)
  (insert "[](\"\")")
  (left-char 5)
  )

(add-hook 'mau-mode-hook
          '(lambda ()
             (local-set-key (kbd "M-`") 'insert-backticks)
             (local-set-key (kbd "M-[") 'insert-macro)))

;; YAML
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-mode))

;; KOTLIN
(require 'kotlin-mode)
(add-to-list 'auto-mode-alist '("\\.kt\\'" . kotlin-mode))

;; HTML/CSS
;; https://github.com/smihica/emmet-mode
(require 'emmet-mode)
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
(setq web-mode-enable-current-column-highlight t)
(setq web-mode-enable-current-element-highlight t)
(setq web-mode-markup-indent-offset 2)
(add-hook 'web-mode-hook 'emmet-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FILES AND PROJECTS

;; My permanent scratch file that I can save
(defun edit-dot-emacsnotes () (interactive) (switch-to-buffer (find-file-noselect "~/.emacsnotes")))

;; Recent files
;; https://www.emacswiki.org/emacs/RecentFiles
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key (kbd "C-x C-r") 'recentf-open-files)

;; Projectile
;; https://docs.projectile.mx/projectile/usage.html
(use-package projectile
  :ensure t
  :init
  (setq projectile-completion-system 'ivy)
  (setq projectile-project-search-path '(("~/devel" . 2)))
  (projectile-mode t))

;; Add projectile to treemacs
;; (use-package treemacs-projectile
;;   :after (treemacs projectile)
;;   :ensure t)

;; https://github.com/Alexander-Miller/treemacs/issues/660
;; (add-hook 'projectile-after-switch-project-hook 'treemacs-display-current-project-exclusively)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FUNCTION KEYS MAPPINGS

;; Map eldoc buffer to F1
(global-set-key (kbd "<f1>") 'eldoc-doc-buffer)

;; Map notes file to F2
(global-set-key (kbd "<f2>") 'edit-dot-emacsnotes)

;; Map treemacs to F3
(global-set-key (kbd "<f3>") 'treemacs)

;; Map server mode to F5
(global-set-key (kbd "<f5>") 'custom-server-mode)

;; Spell check turned on by default F6 to turn it off
(global-set-key (kbd "<f6>") 'flyspell-mode)

(global-set-key (kbd "<f7>") 'projectile-find-file)
(global-set-key (kbd "<f8>") 'projectile-command-map)

(global-set-key (kbd "<f11>") 'goto-line)

;; (global-set-key [f10] 'toggle-theme)

;; (global-set-key (kbd "<next>") 'scroll-up-and-recenter)
;; (global-set-key (kbd "<prior>") 'scroll-down-and-recenter)

;; Consider this to change font globally
;; (global-set-key (kbd "s-=")
;;                 (lambda ()
;;                   (interactive)
;;                   (let ((old-face-attribute (face-attribute 'default :height)))
;;                     (set-face-attribute 'default nil :height (+ old-face-attribute 10)))))

;; (global-set-key (kbd "s--")
;;                 (lambda ()
;;                   (interactive)
;;                   (let ((old-face-attribute (face-attribute 'default :height)))
;;                     (set-face-attribute 'default nil :height (- old-face-attribute 10)))))
